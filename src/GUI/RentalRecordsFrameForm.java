/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import GUI.Dashboard;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.util.ArrayList;
import java.util.Date;
import static javax.print.attribute.Size2DSyntax.MM;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import loveguitars.assignemnt.RentalRecord;

/**
 *
 * @author Tatiana
 */
public class RentalRecordsFrameForm extends javax.swing.JInternalFrame {

    /**
     * Creates new form AddGuitarFrameForm
     */
    public RentalRecordsFrameForm() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui= (BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
        //set tables invisible
        dateRentedTable.setVisible(false);
        rTable1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dateRentedTable = new javax.swing.JTable();
        iDTextField = new javax.swing.JTextField();
        displayButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        aSerialLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        rTable1 = new javax.swing.JTable();
        startDayXDatePicker = new com.toedter.calendar.JDateChooser();
        aColourLabel1 = new javax.swing.JLabel();
        aColourLabel2 = new javax.swing.JLabel();
        endDatePicker = new com.toedter.calendar.JDateChooser();
        searchButton1 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();

        setEnabled(false);
        setPreferredSize(new java.awt.Dimension(666, 646));

        jPanel1.setBackground(new java.awt.Color(34, 41, 48));
        jPanel1.setPreferredSize(new java.awt.Dimension(666, 646));

        jScrollPane1.setBackground(new java.awt.Color(34, 41, 48));

        dateRentedTable.setBackground(new java.awt.Color(34, 41, 48));
        dateRentedTable.setForeground(new java.awt.Color(233, 233, 233));
        dateRentedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Name", "Guitar ID", "Date rented", "Date Due Back", "Date returned"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dateRentedTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        dateRentedTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dateRentedTable.setFillsViewportHeight(true);
        dateRentedTable.setFocusable(false);
        dateRentedTable.setGridColor(new java.awt.Color(0, 0, 0));
        dateRentedTable.setRowHeight(30);
        dateRentedTable.setRowMargin(2);
        dateRentedTable.setSelectionBackground(new java.awt.Color(78, 177, 186));
        dateRentedTable.setSelectionForeground(new java.awt.Color(233, 233, 233));
        dateRentedTable.setShowVerticalLines(false);
        jScrollPane1.setViewportView(dateRentedTable);
        if (dateRentedTable.getColumnModel().getColumnCount() > 0) {
            dateRentedTable.getColumnModel().getColumn(1).setResizable(false);
            dateRentedTable.getColumnModel().getColumn(1).setPreferredWidth(90);
        }

        displayButton.setBackground(new java.awt.Color(78, 177, 186));
        displayButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        displayButton.setText("Display");
        displayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayButtonActionPerformed(evt);
            }
        });

        resetButton.setBackground(new java.awt.Color(78, 177, 186));
        resetButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        aSerialLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        aSerialLabel1.setForeground(new java.awt.Color(78, 177, 186));
        aSerialLabel1.setText("Customer ID");

        jScrollPane2.setBackground(new java.awt.Color(34, 41, 48));

        rTable1.setBackground(new java.awt.Color(34, 41, 48));
        rTable1.setForeground(new java.awt.Color(233, 233, 233));
        rTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Name", "Guitar ID", "Date rented", "Date Due Back", "Date returned"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        rTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        rTable1.setFillsViewportHeight(true);
        rTable1.setFocusable(false);
        rTable1.setGridColor(new java.awt.Color(0, 0, 0));
        rTable1.setRowHeight(30);
        rTable1.setRowMargin(2);
        rTable1.setSelectionBackground(new java.awt.Color(78, 177, 186));
        rTable1.setSelectionForeground(new java.awt.Color(233, 233, 233));
        rTable1.setShowVerticalLines(false);
        jScrollPane2.setViewportView(rTable1);
        if (rTable1.getColumnModel().getColumnCount() > 0) {
            rTable1.getColumnModel().getColumn(1).setResizable(false);
            rTable1.getColumnModel().getColumn(1).setPreferredWidth(90);
        }

        startDayXDatePicker.setDateFormatString("dd/MM/yyyy");
        startDayXDatePicker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                startDayXDatePickerPropertyChange(evt);
            }
        });

        aColourLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        aColourLabel1.setForeground(new java.awt.Color(78, 177, 186));
        aColourLabel1.setText("Start date of rent");

        aColourLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        aColourLabel2.setForeground(new java.awt.Color(78, 177, 186));
        aColourLabel2.setText("End date of rent");

        endDatePicker.setDateFormatString("dd/MM/yyyy");
        endDatePicker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                endDatePickerPropertyChange(evt);
            }
        });

        searchButton1.setBackground(new java.awt.Color(78, 177, 186));
        searchButton1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        searchButton1.setText("Search");
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(233, 233, 233));
        jLabel20.setText("Search recrod by customer:");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(233, 233, 233));
        jLabel21.setText("Search recrod by Date:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aSerialLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(iDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(aColourLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(startDayXDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(aColourLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(displayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20)
                .addGap(2, 2, 2)
                .addComponent(aSerialLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(aColourLabel1)
                            .addComponent(aColourLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startDayXDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(displayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(102, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void displayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayButtonActionPerformed
        // display rental records netween 2 selected dates
        // set simpleDateFromat to display rental dates as dates only, with no time
        SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
        Date startDay=null; Date endDate=null;
         try{
             
             startDay=startDayXDatePicker.getDate();
             endDate=endDatePicker.getDate();
         }
         catch(Exception checkData)
         {
             JOptionPane.showMessageDialog(this, "Please enter correct data");
         }
         if(startDay==null||endDate==null)
         {
             JOptionPane.showMessageDialog(this, "Please choose dates");
         }
          else if(startDay.after(endDate))
                     {
        JOptionPane.showMessageDialog(this, "First date must be before second date");
                     }
          else if (startDay.before(endDate)||startDay.equals(endDate))
          {
        //calling function from the shop to search for record
        RentalRecord found=Dashboard.shop.searchRecordbyDate(startDay, endDate);

        //define table
        dateRentedTable.setVisible(true);
        DefaultTableModel model=(DefaultTableModel)dateRentedTable.getModel();
        model.setNumRows(0);
        ArrayList<RentalRecord> rentals=Dashboard.shop.getRentals();
  
        Object [] rowData= new Object[6];
        for (int i=0; i<rentals.size(); i++)
        {
            rowData[0]=rentals.get(i).getCustomer().getId();
            rowData[1]=rentals.get(i).getCustomer().getName();
            rowData[2]=rentals.get(i).getGuitar().getSerialNumber();
            // check that rent date will be between first and last day, including both days
            if (rentals.get(i).getRentDate().after(startDay)&&rentals.get(i).getRentDate().before(endDate)
                    ||rentals.get(i).getRentDate().equals(startDay)||rentals.get(i).getRentDate().equals(endDate))
            {
                // sdf format to display date as date only, with no time in it
            rowData[3]=sdf.format(rentals.get(i).getRentDate());           
            rowData[4]=sdf.format(rentals.get(i).getReturnDueDate());
            // null value shows empty cell
            if (rentals.get(i).getReturnDate()==null)
            rowData[5]=rentals.get(i).getReturnDate();
            else{
                rowData[5]=sdf.format(rentals.get(i).getReturnDate());
            }
            model.addRow(rowData);
            }
        }
        }    
    }//GEN-LAST:event_displayButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // reset button to clear data
        iDTextField.setText("");
        rTable1.setVisible(false);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void startDayXDatePickerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_startDayXDatePickerPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_startDayXDatePickerPropertyChange

    private void endDatePickerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_endDatePickerPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_endDatePickerPropertyChange

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        // search data for customer rental records by customer id
        String id=iDTextField.getText();
        SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
        // check if rental record exists in the system
        RentalRecord found=Dashboard.shop.searchRecord(id);
        // show table if it has a data
        rTable1.setVisible(true);
        //create a table

        DefaultTableModel model=(DefaultTableModel)rTable1.getModel(); 
        model.setNumRows(0);
        ArrayList<RentalRecord> rentals=Dashboard.shop.getRentals(); 
        Object [] rowData= new Object[6];
        for (int i=0; i<rentals.size(); i++)
        {
            //check if customer id is always the same
            if(rentals.get(i).getCustomer().getId().equals(id))
                    {
            rowData[0]=rentals.get(i).getCustomer().getId();
            rowData[1]=rentals.get(i).getCustomer().getName();
            rowData[2]=rentals.get(i).getGuitar().getSerialNumber();
            //format the look of the date in the table
            rowData[3]=sdf.format(rentals.get(i).getRentDate());
            rowData[4]=sdf.format(rentals.get(i).getReturnDueDate());
            //display empty cell
            if (rentals.get(i).getReturnDate()==null)
            rowData[5]=rentals.get(i).getReturnDate();
            else{
                rowData[5]=sdf.format(rentals.get(i).getReturnDate());
            }
            model.addRow(rowData);
        }
        }   
    }//GEN-LAST:event_searchButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aColourLabel1;
    private javax.swing.JLabel aColourLabel2;
    private javax.swing.JLabel aSerialLabel1;
    private javax.swing.JTable dateRentedTable;
    private javax.swing.JButton displayButton;
    private com.toedter.calendar.JDateChooser endDatePicker;
    private javax.swing.JTextField iDTextField;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable rTable1;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton searchButton1;
    private com.toedter.calendar.JDateChooser startDayXDatePicker;
    // End of variables declaration//GEN-END:variables
}
